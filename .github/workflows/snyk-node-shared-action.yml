# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which sets up Snyk to analyze the full Snyk platform (Snyk Open Source, Snyk Code,
# Snyk Container and Snyk Infrastructure as Code)
# The setup installs the Snyk CLI - for more details on the possible commands
# check https://docs.snyk.io/snyk-cli/cli-reference
# The results of Snyk Code are then uploaded to GitHub Security Code Scanning
#
# In order to use the Snyk Action you will need to have a Snyk API token.
# More details in https://github.com/snyk/actions#getting-your-snyk-token
# or you can signup for free at https://snyk.io/login
#
# For more examples, including how to limit scans to only high-severity issues
# and fail PR checks, see https://github.com/snyk/actions/

name: Snyk Security

on:
  workflow_call:
    inputs:
      SNYK_ORG:
        required: true
        type: string
    secrets:
      SNYK_TOKEN:
        required: true

permissions:
  contents: read

jobs:
  snyk:
    # I have set up a custom environment in GitHub called "production"
    # environment: production
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      # For Snyk Open Source you must first set up the development environment for your application's dependencies
      # For example for Node
      - uses: actions/setup-node@master
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install --loglevel=error

      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG: ${{ inputs.SNYK_ORG }}
          
      - name: Open Source Monitor  
        run: snyk monitor --all-projects || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG: ${{ inputs.SNYK_ORG }}
          
      - name: Code Test  
        run: snyk code test -d --report --project-name="Code_Analysis" --sarif > snyk-code.sarif || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG: ${{ inputs.SNYK_ORG }}
          
      - name: IaC Test  
        run: snyk iac test -d --report || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG: ${{ inputs.SNYK_ORG }}

        # Build the docker image for testing
        # Note: This currently does not work because we need to pass in an image to test in the run commands
      #- name: Build a Docker image
        #run: docker build -t your/image-to-test .
        # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
      #- name: Snyk Container monitor
        #run: snyk container monitor -d your/image-to-test --file=Dockerfile
        #env:
          #SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          #SNYK_ORG: ${{ inputs.SNYK_ORG }}

        # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif
